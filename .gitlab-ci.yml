#
# validate this script with:
# https://gitlab.maisondelasimulation.fr/pkestene/dyablo/-/ci/lint
#
image: "arnodurocher/dyablo-ci:cuda-11.2-visu"

stages:
  - build
  - run_all
  - run
  - test

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Global before and after script to log machine info
before_script:
  - date
  - lscpu
  - git config --global --add safe.directory /builds/pkestene/dyablo/external/kokkos

after_script:
  - date

# Templates for when to create jobs
.rules_mr_manual_branch_manual: # Create manual job for merge request and branch pipelines
    rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_BRANCH
      when: manual

.rules_mr_always_branch_manual: # Create active job for merge request pipeline and manual job for branch pipeline
    rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'dev'
    - if: $CI_COMMIT_BRANCH != 'dev'
      when: manual

.rules_mr_always_branch_always: # Create active job for merge and branch pipeline
    rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' # Auto run pipeline when merge request
    - if: $CI_COMMIT_BRANCH


# Build Dyablo
.build_template:
  stage: build
  artifacts:
    paths:
      - build/dyablo/test/solver
      - build/dyablo/unit_test
    expire_in: 1 week
  extends: .rules_mr_always_branch_manual

build::openmp:
  extends: .build_template
  tags:
    - docker
  script:
    - .gitlab-ci/build-openmp.sh

.build_cuda_template:
  extends: .build_template
  before_script:
    - date
    - nvcc --version
    - git config --global --add safe.directory /builds/pkestene/dyablo/external/kokkos
  tags:
    - docker-cuda
  script:
    - .gitlab-ci/build-cuda.sh

build::cuda:
  extends: .build_cuda_template

build::cuda-10.2:
  extends: .build_cuda_template
  image: "arnodurocher/dyablo-ci:cuda-10.2"
  when: manual

build::cuda-9.2:
  extends: .build_cuda_template
  image: "arnodurocher/dyablo-ci:cuda-9.2"
  when: manual

# Run unit tests
.test_template:
  extends: .rules_mr_always_branch_always
  when: always
  stage: test
  script: .gitlab-ci/run_unit_tests.sh
  artifacts:
    when: always
    paths:
      - build/dyablo/unit_test/gtest_reports/*.xml
    reports:
      junit: 
      - build/dyablo/unit_test/gtest_reports/*.xml

.openmp_template:
  needs: 
    - build::openmp
  tags:
    - docker

.cuda_template:
  before_script:
    - date
    - lscpu
    - nvidia-smi
  needs: 
    - build::cuda
  tags:
    - docker-cuda

test::openmp:
  extends: 
    - .test_template
    - .openmp_template

test::cuda:
  extends: 
    - .test_template
    - .cuda_template

# Run examples (optional)
# ===============================
.run_template:
  stage: run
  image: "arnodurocher/dyablo-ci:cuda-11.2-visu"
  artifacts:
    when: always
    paths:
      - "*.png"
      - "run_*.txt"
      - "report.xml"
    reports:
      junit: 
        - "report.xml"
    expire_in: 1 week

# Run multiple testcases
# -------------------------
run_all::openmp_4mpi:
  extends:  
    - .rules_mr_always_branch_always
    - .run_template
    - .openmp_template
  stage: run_all
  script: 
    - .gitlab-ci/run_and_render_all.sh

run_all::cuda_4mpi:
  extends: 
    - .rules_mr_always_branch_always
    - .run_template
    - .cuda_template
  stage: run_all
  script: 
    - .gitlab-ci/run_and_render_all.sh

# Run separate testcases
# -------------------------

.custom_run:
  extends:  
    - .run_template
    - .rules_mr_manual_branch_manual
  script: 
    - .gitlab-ci/run_testcase_mpi.sh $INI_FILE $MPI_COUNT
    - .gitlab-ci/render.sh $PVSM_FILE
  variables:
    INI_FILE:
      value: "test_gravity_spheres_3D.ini"
      #description: ".ini file for test_solver"
    PVSM_FILE: 
      value: "visu_gravity_spheres_3D.pvsm"
      #description: "pvsm file to generate image"
    MPI_COUNT: 
      value: 4
      #description: "Number of MPI process"


run::custom::openmp:
  extends:  
    - .custom_run
    - .openmp_template

run::custom::cuda:
  extends:  
    - .custom_run
    - .cuda_template




